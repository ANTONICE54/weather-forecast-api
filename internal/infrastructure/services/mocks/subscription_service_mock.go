// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/services/subscription_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"
	models "weather-forecast/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionUseCase is a mock of SubscriptionUseCase interface.
type MockSubscriptionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionUseCaseMockRecorder
}

// MockSubscriptionUseCaseMockRecorder is the mock recorder for MockSubscriptionUseCase.
type MockSubscriptionUseCaseMockRecorder struct {
	mock *MockSubscriptionUseCase
}

// NewMockSubscriptionUseCase creates a new mock instance.
func NewMockSubscriptionUseCase(ctrl *gomock.Controller) *MockSubscriptionUseCase {
	mock := &MockSubscriptionUseCase{ctrl: ctrl}
	mock.recorder = &MockSubscriptionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionUseCase) EXPECT() *MockSubscriptionUseCaseMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubscriptionUseCase) Confirm(ctx context.Context, token string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubscriptionUseCaseMockRecorder) Confirm(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubscriptionUseCase)(nil).Confirm), ctx, token)
}

// Subscribe mocks base method.
func (m *MockSubscriptionUseCase) Subscribe(ctx context.Context, subscription models.Subscription) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscription)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriptionUseCaseMockRecorder) Subscribe(ctx, subscription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriptionUseCase)(nil).Subscribe), ctx, subscription)
}

// Unsubscribe mocks base method.
func (m *MockSubscriptionUseCase) Unsubscribe(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionUseCaseMockRecorder) Unsubscribe(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriptionUseCase)(nil).Unsubscribe), ctx, token)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenManager) Generate(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenManagerMockRecorder) Generate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenManager)(nil).Generate), ctx)
}

// Validate mocks base method.
func (m *MockTokenManager) Validate(ctx context.Context, token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenManagerMockRecorder) Validate(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenManager)(nil).Validate), ctx, token)
}

// MockNotificationServiceI is a mock of NotificationServiceI interface.
type MockNotificationServiceI struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceIMockRecorder
}

// MockNotificationServiceIMockRecorder is the mock recorder for MockNotificationServiceI.
type MockNotificationServiceIMockRecorder struct {
	mock *MockNotificationServiceI
}

// NewMockNotificationServiceI creates a new mock instance.
func NewMockNotificationServiceI(ctrl *gomock.Controller) *MockNotificationServiceI {
	mock := &MockNotificationServiceI{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationServiceI) EXPECT() *MockNotificationServiceIMockRecorder {
	return m.recorder
}

// SendConfirmation mocks base method.
func (m *MockNotificationServiceI) SendConfirmation(ctx context.Context, email, token string, frequency models.Frequency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendConfirmation", ctx, email, token, frequency)
}

// SendConfirmation indicates an expected call of SendConfirmation.
func (mr *MockNotificationServiceIMockRecorder) SendConfirmation(ctx, email, token, frequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmation", reflect.TypeOf((*MockNotificationServiceI)(nil).SendConfirmation), ctx, email, token, frequency)
}

// SendConfirmed mocks base method.
func (m *MockNotificationServiceI) SendConfirmed(ctx context.Context, email, token string, frequency models.Frequency) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendConfirmed", ctx, email, token, frequency)
}

// SendConfirmed indicates an expected call of SendConfirmed.
func (mr *MockNotificationServiceIMockRecorder) SendConfirmed(ctx, email, token, frequency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfirmed", reflect.TypeOf((*MockNotificationServiceI)(nil).SendConfirmed), ctx, email, token, frequency)
}
