// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/server/handlers/weather_handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"
	models "weather-forecast/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// GetWeatherByCity mocks base method.
func (m *MockWeatherService) GetWeatherByCity(ctx context.Context, city string) (*models.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherByCity", ctx, city)
	ret0, _ := ret[0].(*models.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherByCity indicates an expected call of GetWeatherByCity.
func (mr *MockWeatherServiceMockRecorder) GetWeatherByCity(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherByCity", reflect.TypeOf((*MockWeatherService)(nil).GetWeatherByCity), ctx, city)
}
