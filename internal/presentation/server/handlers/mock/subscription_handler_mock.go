// Code generated by MockGen. DO NOT EDIT.
// Source: internal/presentation/server/handlers/subscription_handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"
	models "weather-forecast/internal/domain/models"

	gomock "github.com/golang/mock/gomock"
)

// MockSubsctiptionService is a mock of SubsctiptionService interface.
type MockSubsctiptionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubsctiptionServiceMockRecorder
}

// MockSubsctiptionServiceMockRecorder is the mock recorder for MockSubsctiptionService.
type MockSubsctiptionServiceMockRecorder struct {
	mock *MockSubsctiptionService
}

// NewMockSubsctiptionService creates a new mock instance.
func NewMockSubsctiptionService(ctrl *gomock.Controller) *MockSubsctiptionService {
	mock := &MockSubsctiptionService{ctrl: ctrl}
	mock.recorder = &MockSubsctiptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubsctiptionService) EXPECT() *MockSubsctiptionServiceMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockSubsctiptionService) Confirm(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm.
func (mr *MockSubsctiptionServiceMockRecorder) Confirm(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockSubsctiptionService)(nil).Confirm), ctx, token)
}

// Subscribe mocks base method.
func (m *MockSubsctiptionService) Subscribe(ctx context.Context, email, frequency, city string) (*models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, email, frequency, city)
	ret0, _ := ret[0].(*models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubsctiptionServiceMockRecorder) Subscribe(ctx, email, frequency, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubsctiptionService)(nil).Subscribe), ctx, email, frequency, city)
}

// Unsubscribe mocks base method.
func (m *MockSubsctiptionService) Unsubscribe(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubsctiptionServiceMockRecorder) Unsubscribe(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubsctiptionService)(nil).Unsubscribe), ctx, token)
}
